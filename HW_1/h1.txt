COP4331
Homework 1

Instructor: Dr. Ionut Cardei

Instructions for Organizing Your Code
   1. If you use Netbeans/Eclipse/BlueJ:
      - create a new project called HomeworkX  (where X is the homework #, 1 or 2,...).
      For each programming problem create a new package in the project view (the tree view on the
      left side of the window). Package names should be q1, q2,... for each question/problem. 
      Create or edit classes in the corresponding package for each problem. 

   2. If you write programs with a text editor and compile and run programs from the command line:
      - create a new directory Hi, where i is the current homework number (1,2,...).
      - for each programming problem j create a separate subdirectory Hi/qj in directory Hi, where you 
		place all files belonging to problem j (e.g. directory H1/q3 stores the files for 
		problem 3 in homework 1).


Preparation/Delivery Instructions:
		
   1. Write all your answers, in the order given in the homework file, in ONE PDF file. 
      Follow this format:
      Write your name followed by the section number (e.g. COP4331 003).
      For each problem write as a heading the problem number (e.g. "4.1"). 
      The problem number must be clearly readable before the problem solution. 
      Java source files must be properly identified: write the file name as a heading, 
      followed by the file content.

      Make sure Java code and UML diagrams are readable.
      Nice color syntax highlighting is not required, but appreciated by the graders.
      Good option: http://hilite.me
      Proper indentation and code formatting are required.
      
   2. Upload the PDF file to Canvas.

   3. Upload your source .java files to Canvas.
   
   4. Do **not** include files generated by javadoc in your submission.
      Upload only the pdf/doc file with all solutions. 
   
   5. For full credit, your designs and code must follow the course guidelines and must compile without 
		warnings and work correctly, as required in the problem description. 

Remider: it is academic misconduct to submit work that is not yours.
Do not paste code taken from the web. Only code part of the solution will be graded.
You may use any helpful code from the textbook for your answers.

----------------
Other general advice that will help you do well in this class. And build better code, too.

    * !! Ask your instructor if you have any questions about the homework 
	(and anything else related to the class) !!

    * Consult the solutions for selected textbook problems, available at 
		http://www.horstmann.com/oodp2/solutions/solutions.html

    * Do exactly what the problem asks you to do. There is no extra credit for unnecessary work.
      Points are deducted if design or implemenation requirements are not met.

    * Do not rename classes and methods if they are given.

    * Do not change method signature, where specified. 

    * Design/code your classes for general use. Assume there are other programmers who will use your code.

    * Avoid unnecessary side effects. Do not use static fields/methods, unless warranted, e.g. main(),
        utility functions that don't need an implicit parameter object (this),
	or when you need to share a variable between class instances, or for constants.


    * check for errors and exceptions.

    * Enclose methods that may throw exceptions within a try-catch block.
    
    * Check parameters and variables before you do something in a method. E.g. average = sum/list.size() 
		may throw an ArithmeticException (divide by 0) if the list is empty. 


    * Do not define instance variables when local variables could do the job.

    * Use nouns for class names and verbs for methods.

    * Follow coding conventions; class names start with capitals, methods and variables start with lowercase, etc. 


Scoring: non-optional problems total = 100 points

		
	
==============================================================================================================
Homework problems:

1.
Write a Java program that calculates and displays the Fibonacci 
series, defined by the recursive formula F(n) = F(n-1) + F(n-2).
F(0) and F(1) are given on the command line.
Define and use a class Fib with the following structure:

public class Fib {

	// constructor
	public Fib(int f0, int f1) 
	{
	.....
	}


	// computes F(n) using an ***iterative*** algorithm, where F(n) = F(n-1) + F(n-2) is the recursive definition.
	// use instance variables that store F(0) and F(1).
	// check parameter and throw exception if n < 0. Don't worry about arithmetic overflow.
	public int f(int n) {
	....
	}


	// computes F(n) using the ***recursive*** algorithm, where F(n) = F(n-1) + F(n-2) is the recursive definition.
	// use instance variables that store F(0) and F(1).
	// check parameter and throw exception if n < 0. Don't worry about arithmetic overflow.
	public int fRec(int n) {
	....
	}



	public static void main(String[] args) 
	{
		// get numbers F(0) and F(1) from args[0] and args[1].
		// use either the Scanner class or Integer.parseInt(args[...])
		// you must handle possible exceptions !
		....

		// get n from args[2]:
		....

		// create a Fib object with params F(0) and F(1)
		....


		// calculate F(0), ..., F(n) and display them with System.out.println(...) using
		// the iterative methode f(i)
		....


		// calculate F(0), ..., F(n) and display them with System.out.println(...) using
		// the recursive methode fRec(i)
		....


	}

	// instance variables store F(0) and F(1):
	....
};

Write javadoc comments for the Fib class.



2
a. Write a new method for the Greeter class,

	 public void swapNames(Greeter other) {...}

that swaps the names of this greeter and another instance.


b. write a new method for the Greeter class:
   	public Greeter createQualifiedGreeter(String qualifier) { ..... }
that returns a new Greeter object with its name being the qualifier string followed by
" " and the executing greeter's name (i.e. this.name).
For example:
	Greeter g = new Greeter("world");
	Greeter g2 = g.createQualifiedGreeter("beautiful");

g2.name will be the string "beautiful world"

c. Write a GreeterTester class that shows how the swapNames() and the createQualifiedGreeter() 
methods are used.


Write javadoc comments.
Include both java files in your solution document.



3
Write a program that:
a. reads from the terminal a sequence of numbers (integers)
b. saves them to a file with the name given from the command line
c. calculates,then displays on the terminal, and also saves to that file 
the maximum,  minimum, and average. 


Additional requirements:
Store the numbers in a LinkedList<Integer>. 
Define a class DataAnalyzer that

    * has a constructor that stores the list of numbers: 
	public DataAnalyzer(LinkedList<Integer> numList) {...}
    * has a method each for computing min(), max() and average():
	 public int min() {...}, etc.

Define a class DataAnalyzerTester that reads the numbers from System.in, builds the number list, 
creates the DataAnalyzer object, and displays the min, max, and average using the DataAnalyzer instance. 
The DataAnalyzerTester class implements the main() method.

Your code needs to handle invalid input and I/O exceptions.
Write javadoc comments.
Include both java files in your solution document.




4.
Answer the question and explain what happens without running the code:
What is the value of x after the following code is executed ? 


int x = 0;
try {
	Greeter g1 = new Greeter("Alice");
	Greeter g2 = new Greeter("Alice");
		
	if (g1.sayHello() != g2.sayHello()) {
		g2 = null;
	}
	x = 1;
	System.out.println(g2.sayHello());
	x = 2;
} catch (NullPointerException ex) {
	x = 10;
} catch (RuntimeException ex) {
	x = 4;
} finally {
	x++;
}



5. 
Write a program that computes the prime factorization of a positive integer number. The number in question is
computed as the product of prime numbers raised to various exponents. The prime factorization problem is
finding the primes and their exponents.
For instance, number 72 is the product 72 = 2^3*3^2 and 60 = 2^2*3*5, where ^ is the power (exponentiation)
operator; ^ has higher precedence than multiplication.

Write a class PrimeFactorizer with the following skeleton structure:

public class PrimeFactorizer {
 
  /** 
   * Initialize the object with target number n. 
   */
  public PrimeFactorizer(int n) {
    ...
  } 
  
  /**
   * Return n, the target number.
   */
  public int getN() {
    ...
  }
  
  /**
   * Compute factorization. Do not repeat operation if it was called before.
   */
  public void compute() {
    ...
  }
  
  /**
   * Return the factors and exponents in two arraylists. Call compute() first, if necessary.
   * For instance, if n=60, primes=[2,3,5], and exponents=[2,1,1].
   * This function overwrites the 'n' parameter passed to the constructor.
   */
  public void getFactorsAndExponents(int n, ArrayList<Integer> primes, ArrayList<Integer> exponents) {
    ....
  }
  
  
  /**
   * Return a string with the "pretty" representation of the prime factorization.
   * For instance, if n is 60, then toString() for the PrimeFactorizer(60) object
   * should be "60 = 2^2*3*5". Call compute() if not done before.
   */
  public String toString() {
    ....
  }
  
  ......  // other code, helper functions, etc.
}

Write a test class PrimeFactorTest with a main() function that reads an int number n
from the terminal with the Scanner object, computes its prime factorization with a
PrimeFactorizer object, and then displays the factorization
to the terminal with System.out.println().

